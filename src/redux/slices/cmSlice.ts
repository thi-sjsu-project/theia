import { createSlice } from '@reduxjs/toolkit';
import type { Element, Widget } from '../../types/modalities';

type InitialState = {
  visualComplexity: number;
  audioComplexity: number;
  widgets: Widget[];
  /* ADD MORE AS NEEDED... */
};

const initialState: InitialState = {
  visualComplexity: 0,
  audioComplexity: 0,
  widgets: [],
};

export const cmSlice = createSlice({
  name: 'cm',
  initialState,
  // reducers are used to update the state
  reducers: {
    addWidget: (state, action) => {
      state.widgets.push(action.payload);
    },
    removeWidget: (state, action) => {},
    
    updateWidgetDelete: (state, action) => {//remove elements from widget
      console.log("called!")
      const tempWidgets = state.widgets;
      tempWidgets.forEach(function(widget,widgetIndex){ //go through each widget
        widget.elements.forEach(function(element, elementIndex) { //go through each element
          if(element.id == action.payload){
              console.log(tempWidgets)
              widget.elements = widget.elements.splice(elementIndex, elementIndex);
              console.log(tempWidgets)
          }
          
        });
      });

      state.widgets = tempWidgets;
      
    },
    updateVisualComplexity: (state, action) => {},
    updateAudioComplexity: (state, action) => {},
  },
  // selectors are used to access parts of the state within components
  selectors: {
    getWidgets: (state) => state.widgets,
    // find a single widget by id
    getWidgetById: (state, id: string) =>
      state.widgets.find((widget) => widget.id === id),
    getVisualComplexity: (state) => state.visualComplexity,
    getAudioComplexity: (state) => state.audioComplexity,
  },
});

// action creators (automatically generated by createSlice for each reducer)
export const {
  addWidget,
  removeWidget,
  updateWidgetDelete,
  updateVisualComplexity,
  updateAudioComplexity,
} = cmSlice.actions;

export const {
  getWidgets,
  getWidgetById,
  getVisualComplexity,
  getAudioComplexity,
} = cmSlice.selectors;
