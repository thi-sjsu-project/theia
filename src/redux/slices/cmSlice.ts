import { createSlice } from '@reduxjs/toolkit';
import type { PayloadAction } from '@reduxjs/toolkit';
import type { Widget } from '../../types/modalities';
import type { Message } from 'src/types/schema-types';
import type { GridCell } from 'src/types/support-types';

type InitialState = {
  visualComplexity: number;
  audioComplexity: number;
  widgets: Widget[];
  messages: Message[];
  grid: GridCell[][];
  /* ADD MORE AS NEEDED... */
};

const initialState: InitialState = {
  visualComplexity: 0,
  audioComplexity: 0,
  widgets: [],
  messages: [],
  grid: [],
};

export const cmSlice = createSlice({
  name: 'cm',
  initialState,
  // reducers are used to update the state
  reducers: {
    addWidget: (state, action: PayloadAction<Widget>) => {
      state.widgets.push(action.payload);
    },
    removeWidget: (state, action: PayloadAction<string>) => {
      state.widgets = state.widgets.filter(
        (widget) => widget.id !== action.payload,
      );
    },

    // delete an element from a widget by id
    updateWidgetDelete: (state, action: PayloadAction<string>) => {
      state.widgets = state.widgets.map((widget) => {
        return {
          ...widget,
          elements: widget.elements.filter(
            (element) => element.id !== action.payload,
          ),
        };
      });
    },

    toggleElementInteraction: (state, action: PayloadAction<string>) => {
      state.widgets = state.widgets.map((widget) => {
        if (widget.id === action.payload) {
          return {
            ...widget,
            elements: widget.elements.map((element) => {
              return {
                ...element,
                interacted: !element.interacted,
              };
            }),
          };
        }
        return widget;
      });
    },

    updateVisualComplexity: (state, action: PayloadAction<number>) => {
      state.visualComplexity = action.payload;
    },
    updateAudioComplexity: (state, action: PayloadAction<number>) => {
      state.audioComplexity = action.payload;
    },

    addMessage: (state, action: PayloadAction<Message>) => {
      state.messages.push(action.payload);
    },
  },
  // selectors are used to access parts of the state within components
  selectors: {
    getWidgets: (state) => state.widgets,
    // find a single widget by id
    getWidgetById: (state, id: string) =>
      state.widgets.find((widget) => widget.id === id),
    getVisualComplexity: (state) => state.visualComplexity,
    getAudioComplexity: (state) => state.audioComplexity,
    getMessages: (state) => state.messages,
  },
});

// action creators (automatically generated by createSlice for each reducer)
export const {
  addMessage,
  addWidget,
  removeWidget,
  updateWidgetDelete,
  updateVisualComplexity,
  updateAudioComplexity,
  toggleElementInteraction,
} = cmSlice.actions;

export const {
  getWidgets,
  getWidgetById,
  getMessages,
  getVisualComplexity,
  getAudioComplexity,
} = cmSlice.selectors;
